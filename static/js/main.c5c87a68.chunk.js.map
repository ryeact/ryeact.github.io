{"version":3,"sources":["components/Form/Form.js","store/actions/TodoAction.js","store/actions/actionTypes.js","store/actions/noteAction.js","components/List/TextAndForm.js","components/List/List.js","store/index.js","components/NotesList/NotesList.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","e","setState","text","target","value","onSubmit","state","choice","addTodos","addNotes","onClickChoice","_this2","react_default","a","createElement","Fragment","className","onClick","onChange","type","placeholder","Component","connect","dispatch","todo","payload","addTodo","note","addNote","TextAndFrom","editButtonHandler","viewMode","saveButtonHandler","editTodo","index","cancelButtonHandler","deleteButtonHandler","deleteTodo","onchangeHandler","buttonEdit","List","todos","map","key","TextAndForm","todoReducer","initialStateTodos","initialStateNotes","notes","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","concat","toConsumableArray","newTodos","filter","element","noteReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","NotesList","App","es","components_Form_Form","components_List_List","components_NotesList_NotesList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5c87a68.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../../store/actions/TodoAction'\nimport { addNote } from '../../store/actions/noteAction'\n\nclass Form extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      text: '',\n      choice: 'Todo'\n    }\n  }  \n\n  onChangeHandler = (e) => {\n    this.setState({ text : e.target.value })\n  }\n\n  onSubmit = () => {\n    if(this.state.choice === 'Todo') {\n      this.props.addTodos(this.state.text)\n    } else {\n      this.props.addNotes(this.state.text)\n    }\n    \n    this.setState({ text: '' })\n  }\n\n  onClickChoice = (value) => {\n    this.setState({ choice: value })\n  }\n\n  render () {\n    var styleButtonTodo = ''\n    var styleButtonNotes = ''\n    if(this.state.choice === 'Todo') {\n    styleButtonTodo = 'btn-success'\n    } else {\n    styleButtonNotes = 'btn-success'      \n    }\n    return (\n      <>\n        <button className=\"btn m-2 ${styleButtonTodo}\" onClick={() => this.onClickChoice('Todo')}>Switch to Add Todo</button>\n        <button className=\"btn ${styleButtonNotes}\" onClick={() => this.onClickChoice('Notes')}>Switch to Add Notes</button>\n        <p>Add Todo {this.state.choice}</p>\n        <div className=\"form-group\">\n          <input \n          value={this.state.text}\n          onChange={this.onChangeHandler} type=\"text\" className=\"form-control\" placeholder=\"Type todo here\" />\n        </div>\n        <button onClick={this.onSubmit} className=\"btn btn-primary\">Add</button>\n      </>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTodos: (todo) => dispatch(addTodo(todo)),\n    addNotes: (note) => dispatch(addNote(note))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Form)","import * as actionTypes from './actionTypes'\r\n\r\nexport const addTodo = (todo) => ({ \r\n    type: actionTypes.ADD_TODO,\r\n    payload: todo \r\n})\r\n\r\nexport const editTodo = (payload) => ({\r\n    type: actionTypes.EDIT_TODO,\r\n    payload: payload \r\n})\r\n\r\nexport const deleteTodo = (index) => ({\r\n    type: actionTypes.DELETE_TODO,\r\n    payload: index\r\n})","export const ADD_TODO     = 'ADD_TODO'\r\nexport const EDIT_TODO    = 'EDIT_TODO'\r\nexport const DELETE_TODO  = 'DELETE_TODO'\r\nexport const ADD_NOTE     = 'ADD_NOTE'","import * as actionTypes from './actionTypes'\r\n\r\nexport const addNote = (note) => ({\r\n  type: actionTypes.ADD_NOTE,\r\n  payload: note\r\n})","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { editTodo, deleteTodo } from '../../store/actions/TodoAction'\r\n\r\nclass TextAndFrom extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            viewMode: 'show',\r\n            text: props.todo\r\n        }\r\n    }\r\n\r\n    //fungsi untuk handle ketika user klik tombol edit\r\n    editButtonHandler = () => {\r\n        this.setState({ viewMode: 'edit' })\r\n    }\r\n\r\n    //fungsi untuk handle ketika user klik tombol save\r\n    saveButtonHandler = () => {\r\n        this.props.editTodo(this.props.index, this.state.text)\r\n        this.setState({ viewMode: 'show' })\r\n    }\r\n\r\n    //fungsi untuk handle ketika user klik tombol cancel\r\n    cancelButtonHandler = () => {\r\n        this.setState({ viewMode: 'show'})\r\n    }\r\n    \r\n    //fungsi untuk handle ketika user klik tombol delete\r\n    deleteButtonHandler = () => {\r\n        this.props.deleteTodo(this.props.index)\r\n    }\r\n\r\n    //fungsi untuk handle ketika user edit text di form\r\n    onchangeHandler = (e) => {\r\n        this.setState({ text: e.target.value })\r\n    }\r\n\r\n    render() {\r\n        //default tampilan todo berupa text\r\n        var todo = (\r\n            <p>{this.props.todo}</p>\r\n            )\r\n        \r\n        //default tampilan disamping text todo berupa tombol edit\r\n        var buttonEdit = (\r\n            <button className=\"btn btn-primary\" onClick={this.editButtonHandler}>Edit</button>\r\n            )\r\n            //jika viewMode berubah menjadi 'edit'\r\n            if (this.state.viewMode === 'edit') {\r\n                todo = (\r\n                    <input className=\"form-control\" \r\n                    type=\"text\" value={this.state.text} \r\n                    onChange={this.onchangeHandler}/>\r\n                )\r\n                    // ganti tombol edit menjadi tombol save dan cancel    \r\n                    buttonEdit = (\r\n                        <>\r\n                        <button className=\"btn btn-success\" onClick={this.saveButtonHandler}>Save</button>\r\n                        <button className=\"btn btn-warning\" onClick={this.cancelButtonHandler}>Cancel</button>\r\n                        </>\r\n                    )\r\n                }\r\n        \r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-8\">\r\n                    {todo}\r\n                </div>\r\n                <div className=\"col-4\">\r\n                    {buttonEdit}\r\n                    <button className=\"btn btn-danger float-right\" onClick={this.deleteButtonHandler}>Delete</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n      editTodo: (index, todo) => dispatch( editTodo({ index, todo }) ),\r\n      deleteTodo: (index) => dispatch( deleteTodo(index) )\r\n    }\r\n  }\r\n\r\nexport default connect(null, mapDispatchToProps)(TextAndFrom)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport TextAndForm from './TextAndForm'\n\nclass List extends Component {\n  render (){\n    return (\n      <ul className=\"list-group\">\n        {this.props.todos.map((todo, index) => (\n          <li key={index} className=\"list-group-item container\">\n            <TextAndForm\n            todo = {todo}\n            index = {index}\n            />\n          </li>\n        ))}\n      </ul>\n    )    \n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todoReducer.todos\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    \n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List)\n","import { createStore, combineReducers } from 'redux'\r\nimport * as actionTypes from './actions/actionTypes'\r\n\r\nconst initialStateTodos = {\r\n    todos: []\r\n}\r\n\r\nconst initialStateNotes = {\r\n    notes: []\r\n}\r\n\r\nconst todoReducer = (state = initialStateTodos, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.ADD_TODO:\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, action.payload]\r\n            }\r\n        case actionTypes.DELETE_TODO:\r\n            let newTodos = state.todos.filter((element, index) => index !== action.payload)\r\n            return {\r\n                ...state,\r\n                todos: newTodos\r\n            }\r\n            case actionTypes.EDIT_TODO:\r\n                // edit state\r\n          \r\n                // copy state todos \r\n                let todos = [...state.todos]\r\n                // ganti data todo\r\n                let index = action.payload.index\r\n                let todo = action.payload.todo\r\n                todos[index] = todo\r\n          \r\n                // return state baru\r\n                return {\r\n                  ...state,\r\n                  todos\r\n                }\r\n        default:\r\n        return state\r\n    }\r\n}\r\n\r\nconst noteReducer = (state = initialStateNotes, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.ADD_NOTE:\r\n            return {\r\n                ...state,\r\n                notes: [...state.notes, action.payload]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    todoReducer: todoReducer,\r\n    noteReducer: noteReducer\r\n})\r\n\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nexport default store","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nclass NotesList extends Component {\r\n  render (){\r\n    return (\r\n      <div>\r\n        <p>Notes</p>\r\n        <ul className=\"list-group\">\r\n          {this.props.notes.map((note, index) => (\r\n            <li key={index} className=\"list-group-item container\">\r\n              {note}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    )    \r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    notes: state.noteReducer.notes\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(NotesList)","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form/Form'\nimport List from './components/List/List'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport NotesList from './components/NotesList/NotesList'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store= { store }>\n        <div className=\"App container\">\n          <Form/>\n          <List/>\n          <NotesList/>    \n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}